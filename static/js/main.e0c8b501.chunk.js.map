{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Card/Card.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Card","props","key","id","onClick","handleClick","clicked","name","src","image","alt","Container","state","images","message","score","topScore","imageOrder","_this","forEach","index","setState","sort","Math","random","_this$state","newScore","newTopScore","_this2","this","map","components_Card_Card","Component","App","components_Jumbotron_Jumbotron","components_Container_Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0c8b501.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Jumbotron.css\";\r\n\r\n\r\nconst Jumbotron = () => (\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container text-center\">\r\n    <h1 className=\"display-4\">NHL React Clicky Game!</h1>\r\n    <p className=\"lead\">Click on any image to earn a point, but don't click on any picture more than once!</p>\r\n  </div>\r\n</div>\r\n);\r\n\r\nexport default Jumbotron;\r\n","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n\t<div \r\n\tclassName=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" \r\n\tkey={props.id}\r\n\tonClick={() => props.handleClick(props.id, props.clicked)}>\r\n\t\t<img \r\n\t\tid={props.name}\r\n\t\tsrc={props.image}\r\n\t\talt={props.name}/>\r\n\t</div>\r\n);\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from '../Card';\r\nimport images from \"../../images.json\";\r\nimport \"./Container.css\";\r\n\r\nclass Container extends Component {\r\n\tstate = {\r\n\t\timages,\r\n\t\tmessage: \"Click one of the logos to begin!\",\r\n\t\tscore: 0,\r\n\t\ttopScore: 0\r\n\t};\r\n\t\r\n\thandleClick = (id, clicked) => {\r\n\r\n\t\tconst imageOrder = this.state.images;\r\n\r\n\t\tif (clicked) {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\timageOrder[index].clicked = false;\r\n\t\t\t});\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You Guessed Incorrectly!\",\r\n\t\t\t\tscore: 0\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\tif (id === image.id) {\r\n\t\t\t\t\timageOrder[index].clicked = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst { topScore, score } = this.state;\r\n\t\t\tconst newScore = score + 1;\r\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You Guessed Correctly!\",\r\n\t\t\t\tscore: newScore,\r\n\t\t\t\ttopScore: newTopScore,\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container-fluid mainCardContainer\">\r\n\t\t\t<div className=\"gameMessage text-center\">\r\n\t\t\t\t\t\t<p>{this.state.message}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"gameScores text-center\">\r\n\t\t\t\t\t\t<p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t{this.state.images.map(image => (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={image.id}\r\n\t\t\t\t\t\t\tid={image.id}\r\n\t\t\t\t\t\t\tname={image.name}\r\n\t\t\t\t\t\t\tclicked={image.clicked}\r\n\t\t\t\t\t\t\timage={image.image}\r\n\t\t\t\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Container;","import React from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\nimport \"./App.css\";\n\n\nconst App = () => (\n  <div className=\"container-fluid mainContainer\">\n    <Jumbotron />\n    <Container /> \n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker();"],"sourceRoot":""}